/* Auto-generated by genmsg_cpp for file /home/igor/rosbuild_ws/roomba_robot/roomba_500_series/msg/ScheduleLeds.msg */
#ifndef ROOMBA_500_SERIES_MESSAGE_SCHEDULELEDS_H
#define ROOMBA_500_SERIES_MESSAGE_SCHEDULELEDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace roomba_500_series
{
template <class ContainerAllocator>
struct ScheduleLeds_ {
  typedef ScheduleLeds_<ContainerAllocator> Type;

  ScheduleLeds_()
  : header()
  , sunday(false)
  , monday(false)
  , tuesday(false)
  , wednesday(false)
  , thursday(false)
  , friday(false)
  , saturday(false)
  , colon(false)
  , pm(false)
  , am(false)
  , clock(false)
  , schedule(false)
  {
  }

  ScheduleLeds_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , sunday(false)
  , monday(false)
  , tuesday(false)
  , wednesday(false)
  , thursday(false)
  , friday(false)
  , saturday(false)
  , colon(false)
  , pm(false)
  , am(false)
  , clock(false)
  , schedule(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _sunday_type;
  uint8_t sunday;

  typedef uint8_t _monday_type;
  uint8_t monday;

  typedef uint8_t _tuesday_type;
  uint8_t tuesday;

  typedef uint8_t _wednesday_type;
  uint8_t wednesday;

  typedef uint8_t _thursday_type;
  uint8_t thursday;

  typedef uint8_t _friday_type;
  uint8_t friday;

  typedef uint8_t _saturday_type;
  uint8_t saturday;

  typedef uint8_t _colon_type;
  uint8_t colon;

  typedef uint8_t _pm_type;
  uint8_t pm;

  typedef uint8_t _am_type;
  uint8_t am;

  typedef uint8_t _clock_type;
  uint8_t clock;

  typedef uint8_t _schedule_type;
  uint8_t schedule;


  typedef boost::shared_ptr< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500_series::ScheduleLeds_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ScheduleLeds
typedef  ::roomba_500_series::ScheduleLeds_<std::allocator<void> > ScheduleLeds;

typedef boost::shared_ptr< ::roomba_500_series::ScheduleLeds> ScheduleLedsPtr;
typedef boost::shared_ptr< ::roomba_500_series::ScheduleLeds const> ScheduleLedsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500_series::ScheduleLeds_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500_series

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::ScheduleLeds_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4c552ea7c5b68737285d12a0dee0a839";
  }

  static const char* value(const  ::roomba_500_series::ScheduleLeds_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4c552ea7c5b68737ULL;
  static const uint64_t static_value2 = 0x285d12a0dee0a839ULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500_series/ScheduleLeds";
  }

  static const char* value(const  ::roomba_500_series::ScheduleLeds_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
bool sunday\n\
bool monday\n\
bool tuesday\n\
bool wednesday\n\
bool thursday\n\
bool friday\n\
bool saturday\n\
bool colon\n\
bool pm\n\
bool am\n\
bool clock\n\
bool schedule\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::roomba_500_series::ScheduleLeds_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::roomba_500_series::ScheduleLeds_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.sunday);
    stream.next(m.monday);
    stream.next(m.tuesday);
    stream.next(m.wednesday);
    stream.next(m.thursday);
    stream.next(m.friday);
    stream.next(m.saturday);
    stream.next(m.colon);
    stream.next(m.pm);
    stream.next(m.am);
    stream.next(m.clock);
    stream.next(m.schedule);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ScheduleLeds_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500_series::ScheduleLeds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500_series::ScheduleLeds_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sunday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sunday);
    s << indent << "monday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.monday);
    s << indent << "tuesday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tuesday);
    s << indent << "wednesday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wednesday);
    s << indent << "thursday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.thursday);
    s << indent << "friday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.friday);
    s << indent << "saturday: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.saturday);
    s << indent << "colon: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.colon);
    s << indent << "pm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pm);
    s << indent << "am: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.am);
    s << indent << "clock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clock);
    s << indent << "schedule: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.schedule);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500_SERIES_MESSAGE_SCHEDULELEDS_H

