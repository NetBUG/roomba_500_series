/* Auto-generated by genmsg_cpp for file /home/igor/rosbuild_ws/roomba_robot/roomba_500_series/msg/Buttons.msg */
#ifndef ROOMBA_500_SERIES_MESSAGE_BUTTONS_H
#define ROOMBA_500_SERIES_MESSAGE_BUTTONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace roomba_500_series
{
template <class ContainerAllocator>
struct Buttons_ {
  typedef Buttons_<ContainerAllocator> Type;

  Buttons_()
  : header()
  , clean(false)
  , spot(false)
  , dock(false)
  , day(false)
  , hour(false)
  , minute(false)
  , schedule(false)
  , clock(false)
  {
  }

  Buttons_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , clean(false)
  , spot(false)
  , dock(false)
  , day(false)
  , hour(false)
  , minute(false)
  , schedule(false)
  , clock(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _clean_type;
  uint8_t clean;

  typedef uint8_t _spot_type;
  uint8_t spot;

  typedef uint8_t _dock_type;
  uint8_t dock;

  typedef uint8_t _day_type;
  uint8_t day;

  typedef uint8_t _hour_type;
  uint8_t hour;

  typedef uint8_t _minute_type;
  uint8_t minute;

  typedef uint8_t _schedule_type;
  uint8_t schedule;

  typedef uint8_t _clock_type;
  uint8_t clock;


  typedef boost::shared_ptr< ::roomba_500_series::Buttons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500_series::Buttons_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Buttons
typedef  ::roomba_500_series::Buttons_<std::allocator<void> > Buttons;

typedef boost::shared_ptr< ::roomba_500_series::Buttons> ButtonsPtr;
typedef boost::shared_ptr< ::roomba_500_series::Buttons const> ButtonsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500_series::Buttons_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500_series::Buttons_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500_series

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::Buttons_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::Buttons_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500_series::Buttons_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c6635fea08c0a11307b4518b1f7fd79";
  }

  static const char* value(const  ::roomba_500_series::Buttons_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2c6635fea08c0a11ULL;
  static const uint64_t static_value2 = 0x307b4518b1f7fd79ULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500_series::Buttons_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500_series/Buttons";
  }

  static const char* value(const  ::roomba_500_series::Buttons_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500_series::Buttons_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
bool clean\n\
bool spot\n\
bool dock\n\
bool day\n\
bool hour\n\
bool minute\n\
bool schedule\n\
bool clock\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::roomba_500_series::Buttons_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::roomba_500_series::Buttons_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::roomba_500_series::Buttons_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500_series::Buttons_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.clean);
    stream.next(m.spot);
    stream.next(m.dock);
    stream.next(m.day);
    stream.next(m.hour);
    stream.next(m.minute);
    stream.next(m.schedule);
    stream.next(m.clock);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Buttons_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500_series::Buttons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500_series::Buttons_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "clean: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clean);
    s << indent << "spot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spot);
    s << indent << "dock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "minute: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.minute);
    s << indent << "schedule: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.schedule);
    s << indent << "clock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clock);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500_SERIES_MESSAGE_BUTTONS_H

