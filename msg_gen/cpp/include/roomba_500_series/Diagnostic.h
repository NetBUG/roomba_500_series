/* Auto-generated by genmsg_cpp for file /home/igor/rosbuild_ws/roomba_robot/roomba_500_series/msg/Diagnostic.msg */
#ifndef ROOMBA_500_SERIES_MESSAGE_DIAGNOSTIC_H
#define ROOMBA_500_SERIES_MESSAGE_DIAGNOSTIC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace roomba_500_series
{
template <class ContainerAllocator>
struct Diagnostic_ {
  typedef Diagnostic_<ContainerAllocator> Type;

  Diagnostic_()
  : header()
  , left_motor_current(0)
  , right_motor_current(0)
  , main_brush_current(0)
  , side_brush_current(0)
  , left_motor_overcurrent(false)
  , right_motor_overcurrent(false)
  , main_brush_overcurrent(false)
  , side_brush_overcurrent(false)
  , battery_current(0)
  , battery_voltage(0)
  , battery_temperature(0)
  {
  }

  Diagnostic_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , left_motor_current(0)
  , right_motor_current(0)
  , main_brush_current(0)
  , side_brush_current(0)
  , left_motor_overcurrent(false)
  , right_motor_overcurrent(false)
  , main_brush_overcurrent(false)
  , side_brush_overcurrent(false)
  , battery_current(0)
  , battery_voltage(0)
  , battery_temperature(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int16_t _left_motor_current_type;
  int16_t left_motor_current;

  typedef int16_t _right_motor_current_type;
  int16_t right_motor_current;

  typedef int16_t _main_brush_current_type;
  int16_t main_brush_current;

  typedef int16_t _side_brush_current_type;
  int16_t side_brush_current;

  typedef uint8_t _left_motor_overcurrent_type;
  uint8_t left_motor_overcurrent;

  typedef uint8_t _right_motor_overcurrent_type;
  uint8_t right_motor_overcurrent;

  typedef uint8_t _main_brush_overcurrent_type;
  uint8_t main_brush_overcurrent;

  typedef uint8_t _side_brush_overcurrent_type;
  uint8_t side_brush_overcurrent;

  typedef int16_t _battery_current_type;
  int16_t battery_current;

  typedef int16_t _battery_voltage_type;
  int16_t battery_voltage;

  typedef int8_t _battery_temperature_type;
  int8_t battery_temperature;


  typedef boost::shared_ptr< ::roomba_500_series::Diagnostic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500_series::Diagnostic_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Diagnostic
typedef  ::roomba_500_series::Diagnostic_<std::allocator<void> > Diagnostic;

typedef boost::shared_ptr< ::roomba_500_series::Diagnostic> DiagnosticPtr;
typedef boost::shared_ptr< ::roomba_500_series::Diagnostic const> DiagnosticConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500_series::Diagnostic_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500_series::Diagnostic_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500_series

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::Diagnostic_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::Diagnostic_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500_series::Diagnostic_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c5ab1a026621d8d87d7316b146c2ca2a";
  }

  static const char* value(const  ::roomba_500_series::Diagnostic_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc5ab1a026621d8d8ULL;
  static const uint64_t static_value2 = 0x7d7316b146c2ca2aULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500_series::Diagnostic_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500_series/Diagnostic";
  }

  static const char* value(const  ::roomba_500_series::Diagnostic_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500_series::Diagnostic_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int16 left_motor_current\n\
int16 right_motor_current\n\
int16 main_brush_current\n\
int16 side_brush_current\n\
bool left_motor_overcurrent\n\
bool right_motor_overcurrent\n\
bool main_brush_overcurrent\n\
bool side_brush_overcurrent\n\
int16 battery_current\n\
int16 battery_voltage\n\
int8 battery_temperature\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::roomba_500_series::Diagnostic_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::roomba_500_series::Diagnostic_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::roomba_500_series::Diagnostic_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500_series::Diagnostic_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.left_motor_current);
    stream.next(m.right_motor_current);
    stream.next(m.main_brush_current);
    stream.next(m.side_brush_current);
    stream.next(m.left_motor_overcurrent);
    stream.next(m.right_motor_overcurrent);
    stream.next(m.main_brush_overcurrent);
    stream.next(m.side_brush_overcurrent);
    stream.next(m.battery_current);
    stream.next(m.battery_voltage);
    stream.next(m.battery_temperature);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Diagnostic_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500_series::Diagnostic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500_series::Diagnostic_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_motor_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_motor_current);
    s << indent << "right_motor_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_motor_current);
    s << indent << "main_brush_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.main_brush_current);
    s << indent << "side_brush_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.side_brush_current);
    s << indent << "left_motor_overcurrent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_motor_overcurrent);
    s << indent << "right_motor_overcurrent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_motor_overcurrent);
    s << indent << "main_brush_overcurrent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.main_brush_overcurrent);
    s << indent << "side_brush_overcurrent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.side_brush_overcurrent);
    s << indent << "battery_current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_current);
    s << indent << "battery_voltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "battery_temperature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.battery_temperature);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500_SERIES_MESSAGE_DIAGNOSTIC_H

