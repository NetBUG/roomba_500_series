/* Auto-generated by genmsg_cpp for file /home/igor/rosbuild_ws/roomba_robot/roomba_500_series/msg/Note.msg */
#ifndef ROOMBA_500_SERIES_MESSAGE_NOTE_H
#define ROOMBA_500_SERIES_MESSAGE_NOTE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace roomba_500_series
{
template <class ContainerAllocator>
struct Note_ {
  typedef Note_<ContainerAllocator> Type;

  Note_()
  : note(0)
  , length(0)
  {
  }

  Note_(const ContainerAllocator& _alloc)
  : note(0)
  , length(0)
  {
  }

  typedef uint8_t _note_type;
  uint8_t note;

  typedef uint8_t _length_type;
  uint8_t length;


  typedef boost::shared_ptr< ::roomba_500_series::Note_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roomba_500_series::Note_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Note
typedef  ::roomba_500_series::Note_<std::allocator<void> > Note;

typedef boost::shared_ptr< ::roomba_500_series::Note> NotePtr;
typedef boost::shared_ptr< ::roomba_500_series::Note const> NoteConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::roomba_500_series::Note_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::roomba_500_series::Note_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace roomba_500_series

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::Note_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::roomba_500_series::Note_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::roomba_500_series::Note_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d9b44801be38c06e26bc85d74c2792b";
  }

  static const char* value(const  ::roomba_500_series::Note_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d9b44801be38c06ULL;
  static const uint64_t static_value2 = 0xe26bc85d74c2792bULL;
};

template<class ContainerAllocator>
struct DataType< ::roomba_500_series::Note_<ContainerAllocator> > {
  static const char* value() 
  {
    return "roomba_500_series/Note";
  }

  static const char* value(const  ::roomba_500_series::Note_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::roomba_500_series::Note_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 note\n\
uint8 length\n\
\n\
";
  }

  static const char* value(const  ::roomba_500_series::Note_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::roomba_500_series::Note_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::roomba_500_series::Note_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.note);
    stream.next(m.length);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Note_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roomba_500_series::Note_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::roomba_500_series::Note_<ContainerAllocator> & v) 
  {
    s << indent << "note: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.note);
    s << indent << "length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.length);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROOMBA_500_SERIES_MESSAGE_NOTE_H

